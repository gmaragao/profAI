@startuml
title Proactive Forum Fetch & Action Sequence

participant ProactiveEngine
participant MessageDispatcher
participant MoodleController
participant "Memory Repository" as MemoryRepository
participant "Moodle Web Services (REST API)" as MoodleAPI
participant "Intent Classifier Agent" as IntentAgent
participant "Professor Agent" as ProfessorAgent
participant MessageDispatcher
participant ReportsRepository

== 1. Trigger fetch posts ==
ProactiveEngine -> Orchestrator : verifyNewActionToTriggerForum()
Orchestrator --> ProactiveEngine : Ok response

== 2. Get latest Forum context ==
Orchestrator -> MemoryRepository : getForumContext()
MemoryRepository --> Orchestrator : latestForumContextAndPendingActions

== 3. Check new actions ==
Orchestrator -> ProfessorAgent: getNewActionsForForum(latestForumContextAndPendingActions)
ProfessorAgent --> Orchestrator : newActions[]

== 3. Fetch posts and discussions from Moodle ==
Orchestrator -> MessageDispatcher : filterActions(newActions)
MessageDispatcher --> Orchestrator : actionsToExecute[]

Orchestrator -> MoodleController : getNewForumDiscussions()
MoodleController -> MoodleAPI : GET /mod_forum_get_forum_discussions (id, since)
MoodleAPI --> MoodleController : discussions[] 
MoodleController --> Orchestrator : discussions[]

Orchestrator -> MoodleController : getNewForumPosts()
MoodleController -> MoodleAPI : GET /mod_forum_get_discussion_posts (id, since)
MoodleAPI --> MoodleController : posts[]
MoodleController --> Orchestrator : posts[]

== 4. Classify posts and save data ==
Orchestrator -> MemoryRepository : saveNewDiscussions(discussions[])
MemoryRepository --> Orchestrator: ok response

Orchestrator -> IntentAgent : classifyPosts(posts[])
IntentAgent --> Orchestrator : classifiedPosts[]
Orchestrator -> MemoryRepository : saveMemorySummary(classifiedPosts[])
MemoryRepository --> Orchestrator : ok response

== 5. Plan actions ==
Orchestrator -> ProfessorAgent : planActions(classifiedPosts[])
ProfessorAgent -> MoodleController : getExtraForumData()
MoodleController -> MoodleAPI : GET /mod_forum_get_forum_discussions or other endpoints
MoodleAPI --> MoodleController : extraData[]
MoodleController --> ProfessorAgent : extraData[]

ProfessorAgent -> MemoryRepository : getForumContext()
MemoryRepository --> ProfessorAgent : latestForumContext

ProfessorAgent --> Orchestrator : suggestedActions[]

Orchestrator -> MessageDispatcher : filterActions(suggestedActions)
MessageDispatcher --> Orchestrator : actionsFilteredAndSortedByPriority[]
Orchestrator -> MemoryRepository : saveActions(actionsFilteredAndSortedByPriority[])
MemoryRepository --> Orchestrator : ok response


== 6. Execute actions ==
Orchestrator -> ReportsRepository : logActions(highPriorityActions[])
ReportsRepository --> Orchestrator : ok response
Orchestrator -> MoodleController : executeActions(highPriorityActions[])
MoodleController -> MoodleAPI : POST /mod_forum_add_discussion_post	or other endpoints
MoodleAPI --> MoodleController : response
MoodleController --> Orchestrator : response
Orchestrator -> MemoryRepository : updateActionsTaken(highPriorityActions[])
MemoryRepository --> Orchestrator : ok response
Orchestrator -> ReportsRepository : updateActionReport(highPriorityActions[])
ReportsRepository --> Orchestrator : ok response
@enduml