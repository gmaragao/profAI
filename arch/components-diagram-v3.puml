@startuml 
title Components Diagram
' Use UML2 component style
skinparam componentStyle uml2


actor "Professor" as ProfessorActor
actor "Student" as StudentActor

package "External Services" {
    interface "Moodle Web Services\n(REST API)" as MoodleWebServicesAPI
    component "Moodle LMS" as Moodle <<external service>>
    MoodleWebServicesAPI ..> Moodle : <<use>> REST GET/POST/DELETE
    component "Ollama LLM Service" as OllamaLLM <<external service>>
}


StudentActor ..> Moodle : <<interaction>> create content

' Frontend package
package "Frontend" {
  boundary "Report Viewer"           as ReportViewer
  boundary "Agent Configurator"      as AgentConfigurator

  ProfessorActor ..> ReportViewer : <<interaction>> view reports
  ProfessorActor ..> AgentConfigurator : <<interaction>> upload config
} 

' Backend package
package "Backend" {
  control  "UI Controller"           as UIController
  entity   "Reports Repository"      as ReportsRepo
  component "Orchestrator"              as Orchestrator <<component>>
  control  "Moodle Client"       as MoodleClient
  entity "Intent Repository" as IntentRepository
  entity "VectorStore" as VectorStore

  'LLM-backed agent components
  component "Intent Classifier Agent" as IntentAgent <<LLM-powered component>>
  component "Professor Agent"         as ProfessorAgent <<LLM-powered component>>  
  ' Dependency relationships to Ollama
  IntentAgent ..> OllamaLLM : <<use>> chat
  ProfessorAgent ..> OllamaLLM : <<use>> chat

  component "Proactive Engine"        as ProactiveEngine <<component>>
  entity "Action Repository"       as ActionRepository 
}


' Memory stores
package "Memory Stores" {
  database "Structured Memory DB (MongoDB)"    as StructuredDB
  database "Vector DB (Qdrant)"        as VectorDB
}

' Frontend â†’ Backend interactions
UIController ..> ReportViewer       : <<data>> reports
AgentConfigurator ..> UIController   : <<data>> data config to be deployed

ProfessorActor ..> AgentConfigurator : <<data>> cron job frequency
UIController ..> ProactiveEngine     : <<data>> config proactive engine (cron job freq.)


StructuredDB ..> ReportsRepo       : <<data>> actions data to generate reports
ReportsRepo ..> UIController       : <<data>> reports
UIController ..> ProfessorAgent        : <<data>> data config to be deployed

' Orchestrator flow
MoodleClient ..> MoodleWebServicesAPI      : <<use>> REST GET/POST

MoodleClient ..> Orchestrator     : <<data>> raw input
Orchestrator ..> IntentAgent           : <<data>> raw input for classification
Orchestrator ..> ProfessorAgent       : <<data>> classified input
ProfessorAgent ..> Orchestrator : <<data>> suggested actions
Orchestrator ..> MoodleClient : <<data>> actions to be taken

IntentAgent ..> IntentRepository : <<data>> classified intent data
IntentRepository ..> StructuredDB : <<data>> classified intent data to be saved

' Professor Agent flow
VectorDB ..> ProfessorAgent : <<data>> context data

ActionRepository ..> StructuredDB   : <<data>> action data to be saved
AgentConfigurator ..> VectorStore       : <<data>>  documents for context 
VectorStore ..> VectorDB : <<data>> vectorized data for context

Orchestrator ..>  ActionRepository     : <<data>> actions data to be saved
ActionRepository ..> StructuredDB       : <<data>> actions to be taken and taken data

' Proactive engine triggers
ProactiveEngine ..> Orchestrator : <<action>> trigger action generation
@enduml